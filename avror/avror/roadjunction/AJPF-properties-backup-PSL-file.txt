=====================================================

# Backup "av-agent-00.psl" file (25.05.2021)

# w/ notes and remarks about the properties that have been checked

# including the "sanity checkings"

-----------------------------------------------------

//----------------------------------------------------------------------------
// # AV-agent version 2020-21 for JSAN/AREA paper.
// Agent handles the Highway code rules for road junction: r170, r171, r172.
// This file contains the properties formally verified via AJPF.
// 
// # To be fixed and improved:
// These sort of properties:
// p1 [] (B(av,sign(0,2)) & B(av,stopped)) -> <> G(av, enter_roadjunction_rules170_171)
//
// p4: [] ((B(av,road_user(1,0)) & B(av,busy_roadjunction)) -> <> D(av,wait))
// 
// do not work, we need to find out how to solve this issue
// ...
//-------------------------------------------------------------


// sanity checkings just as a good practice to additional check some properties:

// sanity checking
// p4: [] (D(av,wait) -> B(av,bad))
// has failed!

// sanity checking
// p5: [] (D(av,enter) -> B(av,bad))
// has failed!

// sanity checking
// p6: [] (D(av,check_safe_gap(1,0)) -> B(av,bad)
// has failed!

//-------------------------------------------------------------

p1: (B(av,sign(0,2)) & B(av,stopped)) -> [] G(av, enter_roadjunction_rules170_171)
// when av believes there is a sign at (0,2) and it has stopped, then it always obtains the goal of entering the road junction using rules 170-171.
// helps to keep track of the agent's goals through its execution telling which RJ rules have been selected.

p2: (B(av,sign(0,2)) & B(av,given_away) & B(av,stopped)) -> [] G(av, enter_roadjunction_rules170_172)
// when av believes there is a sign at (0,2), it has given away and stopped, then it always obtains the goal of entering the road junction using rules 170-172. 

p3: [] (B(av,at_roadjunction(1,0)) -> <>(B(av,road_user(1,0)) || B(av,no_road_user(1,0))))
// It is always the case that if the AV is at a road junction at (1,0), then eventually it will believe that either there is a road user at the junction at (1,0) or there is not a road user at the junction at (1,0)

p4: [] (D(av,wait) -> (B(av,road_user(1,0)) & B(av,busy_roadjunction)))
// It is always the case that if the AV waits at the junction, then it believes there is a road user at (1,0) and the road junction is busy.


p5: [] ((B(av,no_road_user(1,0)) & B(av,free_roadjunction)) -> <> (B(av,no_safe_gap(1,0) || B(av,safe_gap(1,0)) || B(av,new_safe_gap(1,0)) || B(av,try_again(1,0))))
// It is always the case that when the AV believes there is no road user at (1,0) and the road junction is free, then eventually the AV will acquire the belief there is no safe gap at (1,0) or there is a safe gap (or a new safe gap) at (1,0) or the belief it has tried again (in the search for road users).


// "check_safe_gap" action:

p6: [] (D(av,check_safe_gap(1,0)) -> ~B(av,busy_roadjunction))
// It is always the case that if the AV checks for safe gap at (1,0), then it should not believe there is a busy road junction.

p7: [] (D(av,check_safe_gap(1,0)) -> ~B(av,road_user(1,0)))
// It is always the case that if the AV checks for safe gap at (1,0), then it should not believe there is a road user at (1,0).

p8: [] (D(av,check_safe_gap(1,0)) -> (B(av,no_road_user(1,0)) & B(av,free_roadjunction))) 
// It is always the case that if the AV checks for safe gap at (1,0), then it believes there is no road user at (1,0) and the road junction is free.

//***************

// "enter" action:

p9: [] (D(av,enter) -> ~B(av,busy_roadjunction))
// It is always the case that if the AV enters the junction, then it should not believe there is busy road junction.

p10: [] (D(av,enter) -> ~B(av,road_user(1,0)))
// It is always the case that if the AV enters the junction, then it should not believe there is a road user at (1,0).

p11: [] (D(av,enter) -> ~B(av,try_again(1,0)))
// It is always the case that if the AV enters the junction, then it should not believe to try again (and watch for a road user) at (1,0).

p12: [] (D(av,enter) -> (B(av,safe_gap(1,0)) || B(av,new_safe_gap(1,0)) & B(av,no_road_user(1,0)))) 
// It is always the case that if the AV enters the junction, then it believes there is a safe gap at (1,0) (or a new safe gap) and no road user at (1,0).

//***************

//---------------------------------------------------

